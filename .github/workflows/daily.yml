name: Daily Business Acquisition Agent

on:
  schedule:
    - cron: "15 11 * * *"  # 7:15 AM ET daily (11:15 UTC)
  workflow_dispatch:  # Allow manual runs

permissions:
  contents: write

jobs:
  run-agent:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Show repo and Python info
        run: |
          pwd
          ls -la
          python --version
          pip --version
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Debug environment (secrets won't be printed)
        env:
          IMAP_USERNAME: ${{ secrets.IMAP_USERNAME }}
          IMAP_APP_PASSWORD: ${{ secrets.IMAP_APP_PASSWORD }}
        run: |
          python - <<'PY'
          import os
          print("HAVE_IMAP_USERNAME:", bool(os.getenv("IMAP_USERNAME")))
          print("HAVE_IMAP_APP_PASSWORD:", bool(os.getenv("IMAP_APP_PASSWORD")))
          PY

      - name: IMAP connection test
        env:
          IMAP_USERNAME: ${{ secrets.IMAP_USERNAME }}
          IMAP_APP_PASSWORD: ${{ secrets.IMAP_APP_PASSWORD }}
          IMAP_HOST: imap.gmail.com
          IMAP_PORT: 993
        run: |
          python - <<'PY'
          import os
          from src.email_imap import fetch_alert_emails
          label = os.getenv("IMAP_LABEL","biz-acq/alerts")
          emails = fetch_alert_emails(label=label, lookback_days=2)
          print(f"IMAP OK. Label '{label}' has {len(emails)} message(s) in last 2 days.")
          PY
          
      - name: Run acquisition agent
        env:
          IMAP_USERNAME: ${{ secrets.IMAP_USERNAME }}
          IMAP_APP_PASSWORD: ${{ secrets.IMAP_APP_PASSWORD }}
          IMAP_HOST: imap.gmail.com
          IMAP_PORT: 993
        run: |
          python -m src.main --config agent_config.yaml
          
      - name: Commit and push results
        run: |
          git config user.name "acquisition-agent-bot"
          git config user.email "agent@example.com"
          git add data/results.json data/results.md data/rejects.csv || true
          git commit -m "Daily acquisition agent update - $(date)" || true
          git push || true