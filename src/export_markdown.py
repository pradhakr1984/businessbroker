import pathlib, json
from datetime import datetime

def write_markdown(listings, path, prev_json_path=None):
    out = []
    out.append("# 🎯 Business Acquisition Report")
    out.append(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    out.append("")
    
    # Summary statistics
    out.append("## 📊 Summary")
    out.append("")
    out.append("| Metric | Value |")
    out.append("|--------|-------|")
    out.append(f"| **Total Opportunities** | {len(listings)} |")
    
    if listings:
        avg_price = sum(r.get('price', 0) for r in listings if r.get('price')) / len([r for r in listings if r.get('price')])
        avg_multiple = sum(r.get('earnings_multiple', 0) for r in listings if r.get('earnings_multiple')) / len([r for r in listings if r.get('earnings_multiple')])
        out.append(f"| **Average Price** | ${avg_price:,.0f} |")
        out.append(f"| **Average Multiple** | {avg_multiple:.1f}x |")
        
        # Platform breakdown
        platforms = {}
        for r in listings:
            site = r.get('source_site', 'unknown')
            platforms[site] = platforms.get(site, 0) + 1
        
        for platform, count in platforms.items():
            out.append(f"| **{platform.title()} Listings** | {count} |")
    else:
        out.append("| **Status** | No opportunities found matching criteria |")
        out.append("| **Next Steps** | Wait for listing alert emails to arrive |")
        out.append("| **Expected** | First alerts typically arrive within 24-48 hours |")
    
    out.append("")
    
    prev_urls = set()
    p = pathlib.Path(prev_json_path) if prev_json_path else None
    if p and p.exists():
        try:
            prev = json.loads(p.read_text())
            prev_urls = {r.get("source_url","") for r in prev}
        except Exception:
            prev_urls = set()

    new = [r for r in listings if r.get("source_url","") and r["source_url"] not in prev_urls]
    
    if listings:
        if new:
            out.append("## 🆕 New Today")
            out.append("")
            for r in new:
                name = r.get('name', 'Unnamed Business')
                price = f"${r.get('price', 0):,}" if r.get('price') else 'Price TBD'
                reason = r.get('reason_for_sale', 'Reason not specified')
                site = r.get('source_site', '').title()
                url = r.get('final_url') or r.get('source_url', '')
                out.append(f"- **{name}** — {price} — {reason} — [{site}]({url})")
            out.append("")

        out.append("## 🎯 All Opportunities")
        out.append("")
        out.append("| Name | Price | Multiple | Reason | Source |")
        out.append("|------|------:|----------|--------|--------|")
        for r in listings:
            name = r.get('name', 'Unnamed Business')
            price = f"${r.get('price', 0):,}" if r.get('price') else 'TBD'
            multiple = f"{r.get('earnings_multiple', 0):.1f}x" if r.get('earnings_multiple') else 'N/A'
            reason = r.get('reason_for_sale', 'Not specified')[:50]
            site = r.get('source_site', 'Unknown').title()
            url = r.get("final_url") or r.get("source_url", "")
            if url:
                site_link = f"[{site}]({url})"
            else:
                site_link = site
            out.append(f"| {name} | {price} | {multiple} | {reason} | {site_link} |")
    else:
        out.append("## 💡 No Opportunities Found")
        out.append("")
        out.append("**This is normal when:**")
        out.append("- Setting up new saved search alerts (24-48 hour delay)")
        out.append("- Market has few listings matching your criteria")
        out.append("- Holiday/weekend periods with reduced activity")
        out.append("")
        out.append("**Next steps:**")
        out.append("1. ✅ Verify saved searches are active on BizBuySell, BizQuest, DealStream")
        out.append("2. ⏰ Wait for listing alert emails to arrive")
        out.append("3. 🔄 Run agent again tomorrow morning")
        out.append("")
        out.append("**Your setup is working correctly!** 🎯")
    
    out.append("")
    out.append("---")
    out.append("*Generated by Business Acquisition Agent*")
    
    content = "\n".join(out) + "\n"
    pathlib.Path(path).parent.mkdir(parents=True, exist_ok=True)
    pathlib.Path(path).write_text(content, encoding="utf-8")
